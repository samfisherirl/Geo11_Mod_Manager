//HUD PS 2 new.
// ---- Created with 3Dmigoto v1.3.16 on Fri Jul 15 17:09:31 2022
Texture2D<float4> t0 : register(t0);

SamplerState s0_s : register(s0);

cbuffer cb0 : register(b0)
{
  float4 cb0[1];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : ORIGINAL_POSITION0,
  float4 v3 : TEXCOORD0,
  float4 v4 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

// This matches the stereo correction in the vertex shader
float stereo_adjustment = StereoParams.Load(0).x * IniParams[12].x * 1;

// Load the scissor rectangle and stereoise it. Note that since both
// SV_Position and the scissor rectange are in pixels, the adjustment needs to
// be divided by the render target size and again by 2:
float4 scissor_rect = IniParams[6].xyzw;
scissor_rect.xz += floor(stereo_adjustment * IniParams[7].x / 2);

// Perform stereo adjusted scissor clipping:
if (any(v0.xy < scissor_rect.xy) || any(v0.xy >= scissor_rect.zw)) {
	o0.xyzw=float4(0.0,0.0,0.0,0.0);
	discard;
}

  r0.xyz = log2(v1.xyz);
  r0.xyz = cb0[0].xxx * r0.xyz;
  r1.xyz = float3(0.416666657,0.416666657,0.416666657) * r0.xyz;
  r0.xyz = exp2(r0.xyz);
  r1.xyz = exp2(r1.xyz);
  r1.xyz = r1.xyz * float3(1.05499995,1.05499995,1.05499995) + float3(-0.0549999997,-0.0549999997,-0.0549999997);
  r2.xyz = float3(12.9200001,12.9200001,12.9200001) * r0.xyz;
  r0.xyz = cmp(r0.xyz >= float3(0.00313066994,0.00313066994,0.00313066994));
  r0.xyz = r0.xyz ? r1.xyz : r2.xyz;
  r0.w = cmp(cb0[0].y != 1.000000);
  o0.xyz = r0.www ? r0.xyz : v1.xyz;
  r0.x = t0.Sample(s0_s, v4.xy).w;
  r0.x = v1.w * r0.x;
  r0.y = r0.x * -2 + 1;
  o0.w = cb0[0].z * r0.y + r0.x;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Fri Jul 15 17:09:31 2022
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// COLOR                    0   xyzw        1     NONE   float   xyzw
// ORIGINAL_POSITION        0   xyzw        2     NONE   float
// TEXCOORD                 0   xy          3     NONE   float
// TEXCOORD                 1   xyzw        4     NONE   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v4.xy
dcl_output o0.xyzw
dcl_temps 3
log r0.xyz, v1.xyzx
mul r0.xyz, r0.xyzx, cb0[0].xxxx
mul r1.xyz, r0.xyzx, l(0.416666657, 0.416666657, 0.416666657, 0.000000)
exp r0.xyz, r0.xyzx
exp r1.xyz, r1.xyzx
mad r1.xyz, r1.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000), l(-0.055000, -0.055000, -0.055000, 0.000000)
mul r2.xyz, r0.xyzx, l(12.920000, 12.920000, 12.920000, 0.000000)
ge r0.xyz, r0.xyzx, l(0.00313066994, 0.00313066994, 0.00313066994, 0.000000)
movc r0.xyz, r0.xyzx, r1.xyzx, r2.xyzx
ne r0.w, cb0[0].y, l(1.000000)
movc o0.xyz, r0.wwww, r0.xyzx, v1.xyzx
sample_indexable(texture2d)(float,float,float,float) r0.x, v4.xyxx, t0.wxyz, s0
mul r0.x, r0.x, v1.w
mad r0.y, r0.x, l(-2.000000), l(1.000000)
mad o0.w, cb0[0].z, r0.y, r0.x
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
