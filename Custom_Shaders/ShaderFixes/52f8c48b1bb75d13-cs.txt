//Clipping CS new.
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Fri Jul 15 16:18:04 2022
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[127], immediateIndexed
dcl_constantbuffer cb1[341], dynamicIndexed
dcl_constantbuffer cb2[4], immediateIndexed
dcl_resource_buffer (float,float,float,float) t0
dcl_uav_typed_buffer (uint,uint,uint,uint) u0
dcl_uav_typed_buffer (uint,uint,uint,uint) u1
dcl_uav_typed_buffer (uint,uint,uint,uint) u2
dcl_input vThreadID.xyz
dcl_temps 41
dcl_thread_group 4, 4, 4
dcl_resource_texture2d (float,float,float,float) t125
ld_indexable(texture2d)(float,float,float,float) r36.xyzw, l(0, 0, 0, 0), t125.xyzw
ult r0.xyz, vThreadID.xyzx, cb2[1].xyzx
and r0.x, r0.y, r0.x
and r0.x, r0.z, r0.x
if_nz r0.x
  imad r0.x, vThreadID.z, cb2[1].y, vThreadID.y
  imad r0.x, r0.x, cb2[1].x, vThreadID.x
  ishl r0.y, l(1), cb2[2].x
  itof r0.y, r0.y
  mul r0.yz, r0.yyyy, cb0[126].zzwz
  mul r0.yz, r0.yyzy, l(0.000000, 2.000000, -2.000000, 0.000000)
  utof r1.xyz, vThreadID.xyzx
  mad r1.xy, r1.xyxx, r0.yzyy, l(-1.000000, 1.000000, 0.000000, 0.000000)
  iadd r2.xyz, vThreadID.xyzx, l(1, 1, 1, 0)
  utof r2.xyw, r2.xyxz
  mad r0.yz, r2.xxyx, r0.yyzy, l(0.000000, -1.000000, 1.000000, 0.000000)
  div r0.w, r1.z, cb2[3].z
  exp r0.w, r0.w
  add r0.w, r0.w, -cb2[3].y
  div r0.w, r0.w, cb2[3].x
  ieq r1.z, vThreadID.z, cb2[1].z
  movc r0.w, r1.z, l(2000000.000000), r0.w
  movc r3.z, vThreadID.z, r0.w, l(0)
  div r0.w, r2.w, cb2[3].z
  exp r0.w, r0.w
  add r0.w, r0.w, -cb2[3].y
  div r0.w, r0.w, cb2[3].x
  ieq r1.z, r2.z, cb2[1].z
  movc r2.z, r1.z, l(2000000.000000), r0.w
  lt r0.w, cb0[31].w, l(1.000000)
  add r1.z, r3.z, cb0[61].w
  mul r1.z, r1.z, cb0[61].z
  div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
  mad r1.w, r3.z, cb0[30].z, cb0[31].z
  movc r1.z, r0.w, r1.z, r1.w
  
  //Clipping fix.
  mul r37.x, r36.y, r1.z
  add r36.w, l(1.0), r37.x
  mad r1.x, r36.x, -r36.w, r1.x
  mad r0.y, r36.x, r36.w, r0.y
  
  mul r4.xyz, r1.yyyy, cb0[37].xywx
  mad r5.xyz, r1.xxxx, cb0[36].xywx, r4.xyzx
  mad r6.xyz, r1.zzzz, cb0[38].xywx, r5.xyzx
  add r6.xyz, r6.xyzx, cb0[39].xywx
  mul r7.xyz, r0.zzzz, cb0[37].xywx
  mad r8.xyz, r0.yyyy, cb0[36].xywx, r7.xyzx
  mad r9.xyz, r1.zzzz, cb0[38].xywx, r8.xyzx
  add r9.xyz, r9.xyzx, cb0[39].xywx
  mad r1.xyw, r1.xxxx, cb0[36].xyxw, r7.xyxz
  mad r7.xyz, r1.zzzz, cb0[38].xywx, r1.xywx
  add r7.xyz, r7.xyzx, cb0[39].xywx
  mad r4.xyz, r0.yyyy, cb0[36].xywx, r4.xyzx
  mad r10.xyz, r1.zzzz, cb0[38].xywx, r4.xyzx
  add r10.xyz, r10.xyzx, cb0[39].xywx
  add r0.y, r2.z, cb0[61].w
  mul r0.y, r0.y, cb0[61].z
  div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
  mad r0.z, r2.z, cb0[30].z, cb0[31].z
  movc r0.y, r0.w, r0.y, r0.z
  mad r5.xyz, r0.yyyy, cb0[38].xywx, r5.xyzx
  add r5.xyz, r5.xyzx, cb0[39].xywx
  mad r8.xyz, r0.yyyy, cb0[38].xywx, r8.xyzx
  add r8.xyz, r8.xyzx, cb0[39].xywx
  mad r1.xyz, r0.yyyy, cb0[38].xywx, r1.xywx
  add r1.xyz, r1.xyzx, cb0[39].xywx
  mad r0.yzw, r0.yyyy, cb0[38].xxyw, r4.xxyz
  add r0.yzw, r0.yyzw, cb0[39].xxyw
  div r4.xy, r6.xyxx, r6.zzzz
  div r4.zw, r9.xxxy, r9.zzzz
  div r6.xy, r7.xyxx, r7.zzzz
  div r6.zw, r10.xxxy, r10.zzzz
  div r5.xy, r5.xyxx, r5.zzzz
  div r5.zw, r8.xxxy, r8.zzzz
  div r1.xy, r1.xyxx, r1.zzzz
  div r0.yz, r0.yyzy, r0.wwww
  min r1.zw, r4.zzzw, r4.xxxy
  min r1.zw, r6.xxxy, r1.zzzw
  min r1.zw, r6.zzzw, r1.zzzw
  min r1.zw, r5.xxxy, r1.zzzw
  min r1.zw, r5.zzzw, r1.zzzw
  min r1.zw, r1.xxxy, r1.zzzw
  min r3.xy, r0.yzyy, r1.zwzz
  max r1.zw, r4.zzzw, r4.xxxy
  max r1.zw, r6.xxxy, r1.zzzw
  max r1.zw, r6.zzzw, r1.zzzw
  max r1.zw, r5.xxxy, r1.zzzw
  max r1.zw, r5.zzzw, r1.zzzw
  max r1.xy, r1.xyxx, r1.zwzz
  max r2.xy, r0.yzyy, r1.xyxx
  add r0.yzw, r2.xxyz, r3.xxyz
  mul r1.xyz, r0.yzwy, l(0.500000, 0.500000, 0.500000, 0.000000)
  mad r2.xyz, -r0.yzwy, l(0.500000, 0.500000, 0.500000, 0.000000), r2.xyzx
  mul r3.xyz, r1.yyyy, cb0[17].xyzx
  mad r1.xyw, r1.xxxx, cb0[16].xyxz, r3.xyxz
  mad r1.xyz, r1.zzzz, cb0[18].xyzx, r1.xywx
  add r1.xyz, r1.xyzx, cb0[19].xyzx
  add r1.xyz, r1.xyzx, -cb0[66].xyzx
  dp3 r1.w, r2.xyzx, r2.xyzx
  sqrt r1.w, r1.w
  imul null, r2.w, cb2[0].w, cb2[1].w
  ishl r2.w, r2.w, l(1)
  mov r3.x, l(0)
  loop
    uge r3.y, r3.x, cb2[0].x
    breakc_nz r3.y
    imul null, r3.y, r3.x, l(5)
    ld_indexable(buffer)(float,float,float,float) r4.xyzw, r3.yyyy, t0.xyzw
    div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
    imad r3.y, r3.x, l(5), l(3)
    ld_indexable(buffer)(float,float,float,float) r3.y, r3.yyyy, t0.yxzw
    lt r3.z, l(-2.000000), r3.y
    if_nz r3.z
      mad r3.z, -r3.y, r3.y, l(1.000000)
      imad r3.w, r3.x, l(5), l(2)
      ld_indexable(buffer)(float,float,float,float) r5.xyz, r3.wwww, t0.xyzw
      add r6.xyz, r1.xyzx, -r4.xyzx
      dp3 r3.w, r6.xyzx, r6.xyzx
      dp3 r5.w, r6.xyzx, -r5.xyzx
      mad r3.w, -r5.w, r5.w, r3.w
      sqrt r3.zw, r3.zzzw
      mul r6.x, r3.z, r5.w
      mad r3.w, r3.y, r3.w, -r6.x
      lt r3.w, r1.w, r3.w
      add r6.x, r1.w, r4.w
      lt r6.x, r6.x, r5.w
      lt r5.w, r5.w, -r1.w
      or r3.w, r3.w, r6.x
      or r3.w, r5.w, r3.w
      not r3.w, r3.w
      lt r5.w, r3.y, l(0.707107)
      mul r6.xyz, r4.wwww, r5.xyzx
      mad r6.xyz, -r6.xyzx, r3.yyyy, r4.xyzx
      mul r6.w, r3.z, r4.w
      add r3.y, r3.y, r3.y
      div r7.w, r4.w, r3.y
      mad r7.xyz, -r5.xyzx, r7.wwww, r4.xyzx
      movc r4.xyzw, r5.wwww, r6.xyzw, r7.xyzw
    else
      mov r3.w, l(-1)
    endif
    add r4.xyz, r4.xyzx, cb0[66].xyzx
    mul r5.xyz, r4.yyyy, cb0[13].xyzx
    mad r5.xyz, r4.xxxx, cb0[12].xyzx, r5.xyzx
    mad r4.xyz, r4.zzzz, cb0[14].xyzx, r5.xyzx
    add r4.xyz, r4.xyzx, cb0[15].xyzx
    mad r4.xyz, -r0.yzwy, l(0.500000, 0.500000, 0.500000, 0.000000), r4.xyzx
    add r4.xyz, -r2.xyzx, |r4.xyzx|
    max r4.xyz, r4.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    dp3 r3.y, r4.xyzx, r4.xyzx
    mul r3.z, r4.w, r4.w
    lt r3.y, r3.y, r3.z
    and r3.y, r3.w, r3.y
    if_nz r3.y
      imm_atomic_iadd r4.x, u0, l(0), l(1)
      ult r3.y, r4.x, r2.w
      if_nz r3.y
        imm_atomic_exch r5.x, u1, r0.x, r4.x
        ishl r3.y, r4.x, l(1)
        store_uav_typed u2.xyzw, r3.yyyy, r3.xxxx
        bfi r3.z, l(31), l(1), r4.x, l(1)
        store_uav_typed u2.xyzw, r3.zzzz, r5.xxxx
      endif
    endif
    iadd r3.x, r3.x, l(1)
  endloop
  iadd r0.x, r0.x, cb2[0].w
  mov r1.x, l(0)
  loop
    uge r1.y, r1.x, cb2[0].y
    breakc_nz r1.y
    add r1.yzw, cb0[66].xxyz, cb1[r1.x + 0].xxyz
    mul r3.xyz, r1.zzzz, cb0[13].xyzx
    mad r3.xyz, r1.yyyy, cb0[12].xyzx, r3.xyzx
    mad r1.yzw, r1.wwww, cb0[14].xxyz, r3.xxyz
    add r1.yzw, r1.yyzw, cb0[15].xxyz
    mad r1.yzw, -r0.yyzw, l(0.000000, 0.500000, 0.500000, 0.500000), r1.yyzw
    add r1.yzw, -r2.xxyz, |r1.yyzw|
    max r1.yzw, r1.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
    dp3 r1.y, r1.yzwy, r1.yzwy
    mul r1.z, cb1[r1.x + 0].w, cb1[r1.x + 0].w
    lt r1.y, r1.y, r1.z
    if_nz r1.y
      imm_atomic_iadd r3.x, u0, l(0), l(1)
      ult r1.y, r3.x, r2.w
      if_nz r1.y
        imm_atomic_exch r4.x, u1, r0.x, r3.x
        ishl r1.y, r3.x, l(1)
        store_uav_typed u2.xyzw, r1.yyyy, r1.xxxx
        bfi r1.z, l(31), l(1), r3.x, l(1)
        store_uav_typed u2.xyzw, r1.zzzz, r4.xxxx
      endif
    endif
    iadd r1.x, r1.x, l(1)
  endloop
endif
ret
// Approximately 0 instruction slots used

///////////////////////////////// HLSL Code /////////////////////////////////
// // ---- Created with 3Dmigoto v1.3.16 on Fri Jul 15 16:18:04 2022
// Buffer<float4> t0 : register(t0);
//
// cbuffer cb2 : register(b2)
// {
//   float4 cb2[4];
// }
//
// cbuffer cb1 : register(b1)
// {
//   float4 cb1[341];
// }
//
// cbuffer cb0 : register(b0)
// {
//   float4 cb0[127];
// }
//
//
//
//
// // 3Dmigoto declarations
// #define cmp -
// Texture1D<float4> IniParams : register(t120);
// Texture2D<float4> StereoParams : register(t125);
//
//
// void main)
// {
// // Needs manual fix for instruction:
// // unknown dcl_: dcl_uav_typed_buffer (uint,uint,uint,uint) u0
// // Needs manual fix for instruction:
// // unknown dcl_: dcl_uav_typed_buffer (uint,uint,uint,uint) u1
// // Needs manual fix for instruction:
// // unknown dcl_: dcl_uav_typed_buffer (uint,uint,uint,uint) u2
//   float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10;
//   uint4 bitmask, uiDest;
//   float4 fDest;
//
// // Needs manual fix for instruction:
// // unknown dcl_: dcl_thread_group 4, 4, 4
//   r0.xyz = cmp((uint3)vThreadID.xyz < asuint(cb2[1].xyz));
//   r0.x = r0.y ? r0.x : 0;
//   r0.x = r0.z ? r0.x : 0;
//   if (r0.x != 0) {
//     r0.x = mad((int)vThreadID.z, asint(cb2[1].y), (int)vThreadID.y);
//     r0.x = mad((int)r0.x, asint(cb2[1].x), (int)vThreadID.x);
//     r0.y = 1 << asint(cb2[2].x);
//     r0.y = (int)r0.y;
//     r0.yz = cb0[126].zw * r0.yy;
//     r0.yz = float2(2,-2) * r0.yz;
//     r1.xyz = (uint3)vThreadID.xyz;
//     r1.xy = r1.xy * r0.yz + float2(-1,1);
//     r2.xyz = (int3)vThreadID.xyz + int3(1,1,1);
//     r2.xyw = (uint3)r2.xyz;
//     r0.yz = r2.xy * r0.yz + float2(-1,1);
//     r0.w = r1.z / cb2[3].z;
//     r0.w = exp2(r0.w);
//     r0.w = -cb2[3].y + r0.w;
//     r0.w = r0.w / cb2[3].x;
//     r1.z = cmp((int)vThreadID.z == asint(cb2[1].z));
//     r0.w = r1.z ? 2000000 : r0.w;
//     r3.z = vThreadID.z ? r0.w : 0;
//     r0.w = r2.w / cb2[3].z;
//     r0.w = exp2(r0.w);
//     r0.w = -cb2[3].y + r0.w;
//     r0.w = r0.w / cb2[3].x;
//     r1.z = cmp((int)r2.z == asint(cb2[1].z));
//     r2.z = r1.z ? 2000000 : r0.w;
//     r0.w = cmp(cb0[31].w < 1);
//     r1.z = cb0[61].w + r3.z;
//     r1.z = cb0[61].z * r1.z;
//     r1.z = 1 / r1.z;
//     r1.w = r3.z * cb0[30].z + cb0[31].z;
//     r1.z = r0.w ? r1.z : r1.w;
//     r4.xyz = cb0[37].xyw * r1.yyy;
//     r5.xyz = r1.xxx * cb0[36].xyw + r4.xyz;
//     r6.xyz = r1.zzz * cb0[38].xyw + r5.xyz;
//     r6.xyz = cb0[39].xyw + r6.xyz;
//     r7.xyz = cb0[37].xyw * r0.zzz;
//     r8.xyz = r0.yyy * cb0[36].xyw + r7.xyz;
//     r9.xyz = r1.zzz * cb0[38].xyw + r8.xyz;
//     r9.xyz = cb0[39].xyw + r9.xyz;
//     r1.xyw = r1.xxx * cb0[36].xyw + r7.xyz;
//     r7.xyz = r1.zzz * cb0[38].xyw + r1.xyw;
//     r7.xyz = cb0[39].xyw + r7.xyz;
//     r4.xyz = r0.yyy * cb0[36].xyw + r4.xyz;
//     r10.xyz = r1.zzz * cb0[38].xyw + r4.xyz;
//     r10.xyz = cb0[39].xyw + r10.xyz;
//     r0.y = cb0[61].w + r2.z;
//     r0.y = cb0[61].z * r0.y;
//     r0.y = 1 / r0.y;
//     r0.z = r2.z * cb0[30].z + cb0[31].z;
//     r0.y = r0.w ? r0.y : r0.z;
//     r5.xyz = r0.yyy * cb0[38].xyw + r5.xyz;
//     r5.xyz = cb0[39].xyw + r5.xyz;
//     r8.xyz = r0.yyy * cb0[38].xyw + r8.xyz;
//     r8.xyz = cb0[39].xyw + r8.xyz;
//     r1.xyz = r0.yyy * cb0[38].xyw + r1.xyw;
//     r1.xyz = cb0[39].xyw + r1.xyz;
//     r0.yzw = r0.yyy * cb0[38].xyw + r4.xyz;
//     r0.yzw = cb0[39].xyw + r0.yzw;
//     r4.xy = r6.xy / r6.zz;
//     r4.zw = r9.xy / r9.zz;
//     r6.xy = r7.xy / r7.zz;
//     r6.zw = r10.xy / r10.zz;
//     r5.xy = r5.xy / r5.zz;
//     r5.zw = r8.xy / r8.zz;
//     r1.xy = r1.xy / r1.zz;
//     r0.yz = r0.yz / r0.ww;
//     r1.zw = min(r4.xy, r4.zw);
//     r1.zw = min(r1.zw, r6.xy);
//     r1.zw = min(r1.zw, r6.zw);
//     r1.zw = min(r1.zw, r5.xy);
//     r1.zw = min(r1.zw, r5.zw);
//     r1.zw = min(r1.zw, r1.xy);
//     r3.xy = min(r1.zw, r0.yz);
//     r1.zw = max(r4.xy, r4.zw);
//     r1.zw = max(r1.zw, r6.xy);
//     r1.zw = max(r1.zw, r6.zw);
//     r1.zw = max(r1.zw, r5.xy);
//     r1.zw = max(r1.zw, r5.zw);
//     r1.xy = max(r1.zw, r1.xy);
//     r2.xy = max(r1.xy, r0.yz);
//     r0.yzw = r3.xyz + r2.xyz;
//     r1.xyz = float3(0.5,0.5,0.5) * r0.yzw;
//     r2.xyz = -r0.yzw * float3(0.5,0.5,0.5) + r2.xyz;
//     r3.xyz = cb0[17].xyz * r1.yyy;
//     r1.xyw = r1.xxx * cb0[16].xyz + r3.xyz;
//     r1.xyz = r1.zzz * cb0[18].xyz + r1.xyw;
//     r1.xyz = cb0[19].xyz + r1.xyz;
//     r1.xyz = -cb0[66].xyz + r1.xyz;
//     r1.w = dot(r2.xyz, r2.xyz);
//     r1.w = sqrt(r1.w);
//     r2.w = asint(cb2[0].w) * asint(cb2[1].w);
//     r2.w = (uint)r2.w << 1;
//     r3.x = 0;
//     while (true) {
//       r3.y = cmp((uint)r3.x >= asuint(cb2[0].x));
//       if (r3.y != 0) break;
//       r3.y = (int)r3.x * 5;
//       r4.xyzw = t0.Load(r3.y).xyzw;
//       r4.w = 1 / r4.w;
//       r3.y = mad((int)r3.x, 5, 3);
//       r3.y = t0.Load(r3.y).x;
//       r3.z = cmp(-2 < r3.y);
//       if (r3.z != 0) {
//         r3.z = -r3.y * r3.y + 1;
//         r3.w = mad((int)r3.x, 5, 2);
//         r5.xyz = t0.Load(r3.w).xyz;
//         r6.xyz = -r4.xyz + r1.xyz;
//         r3.w = dot(r6.xyz, r6.xyz);
//         r5.w = dot(r6.xyz, -r5.xyz);
//         r3.w = -r5.w * r5.w + r3.w;
//         r3.zw = sqrt(r3.zw);
//         r6.x = r5.w * r3.z;
//         r3.w = r3.y * r3.w + -r6.x;
//         r3.w = cmp(r1.w < r3.w);
//         r6.x = r4.w + r1.w;
//         r6.x = cmp(r6.x < r5.w);
//         r5.w = cmp(r5.w < -r1.w);
//         r3.w = (int)r3.w | (int)r6.x;
//         r3.w = (int)r5.w | (int)r3.w;
//         r3.w = ~(int)r3.w;
//         r5.w = cmp(r3.y < 0.707107008);
//         r6.xyz = r5.xyz * r4.www;
//         r6.xyz = -r6.xyz * r3.yyy + r4.xyz;
//         r6.w = r4.w * r3.z;
//         r3.y = r3.y + r3.y;
//         r7.w = r4.w / r3.y;
//         r7.xyz = -r5.xyz * r7.www + r4.xyz;
//         r4.xyzw = r5.wwww ? r6.xyzw : r7.xyzw;
//       } else {
//         r3.w = -1;
//       }
//       r4.xyz = cb0[66].xyz + r4.xyz;
//       r5.xyz = cb0[13].xyz * r4.yyy;
//       r5.xyz = r4.xxx * cb0[12].xyz + r5.xyz;
//       r4.xyz = r4.zzz * cb0[14].xyz + r5.xyz;
//       r4.xyz = cb0[15].xyz + r4.xyz;
//       r4.xyz = -r0.yzw * float3(0.5,0.5,0.5) + r4.xyz;
//       r4.xyz = abs(r4.xyz) + -r2.xyz;
//       r4.xyz = max(float3(0,0,0), r4.xyz);
//       r3.y = dot(r4.xyz, r4.xyz);
//       r3.z = r4.w * r4.w;
//       r3.y = cmp(r3.y < r3.z);
//       r3.y = r3.y ? r3.w : 0;
//       if (r3.y != 0) {
//         // Needs manual fix for instruction:
//             imm_atomic_iadd r4.x, u0, l(0), l(1)
//         InterlockedAdd(dest, imm_value, orig_value);
//         r3.y = cmp((uint)r4.x < (uint)r2.w);
//         if (r3.y != 0) {
//           // Needs manual fix for instruction:
//                 imm_atomic_exch r5.x, u1, r0.x, r4.x
//           InterlockedExchange(dest, imm_value, orig_value);
//           r3.y = (uint)r4.x << 1;
//         // No code for instruction (needs manual fix):
//                 store_uav_typed u2.xyzw, r3.yyyy, r3.xxxx
//           bitmask.z = ((~(-1 << 31)) << 1) & 0xffffffff;  r3.z = (((uint)r4.x << 1) & bitmask.z) | ((uint)1 & ~bitmask.z);
//         // No code for instruction (needs manual fix):
//                 store_uav_typed u2.xyzw, r3.zzzz, r5.xxxx
//         }
//       }
//       r3.x = (int)r3.x + 1;
//     }
//     r0.x = (int)r0.x + asint(cb2[0].w);
//     r1.x = 0;
//     while (true) {
//       r1.y = cmp((uint)r1.x >= asuint(cb2[0].y));
//       if (r1.y != 0) break;
//       r1.yzw = cb1[r1.x+0].xyz + cb0[66].xyz;
//       r3.xyz = cb0[13].xyz * r1.zzz;
//       r3.xyz = r1.yyy * cb0[12].xyz + r3.xyz;
//       r1.yzw = r1.www * cb0[14].xyz + r3.xyz;
//       r1.yzw = cb0[15].xyz + r1.yzw;
//       r1.yzw = -r0.yzw * float3(0.5,0.5,0.5) + r1.yzw;
//       r1.yzw = abs(r1.yzw) + -r2.xyz;
//       r1.yzw = max(float3(0,0,0), r1.yzw);
//       r1.y = dot(r1.yzw, r1.yzw);
//       r1.z = cb1[r1.x+0].w * cb1[r1.x+0].w;
//       r1.y = cmp(r1.y < r1.z);
//       if (r1.y != 0) {
//         // Needs manual fix for instruction:
//             imm_atomic_iadd r3.x, u0, l(0), l(1)
//         InterlockedAdd(dest, imm_value, orig_value);
//         r1.y = cmp((uint)r3.x < (uint)r2.w);
//         if (r1.y != 0) {
//           // Needs manual fix for instruction:
//                 imm_atomic_exch r4.x, u1, r0.x, r3.x
//           InterlockedExchange(dest, imm_value, orig_value);
//           r1.y = (uint)r3.x << 1;
//         // No code for instruction (needs manual fix):
//                 store_uav_typed u2.xyzw, r1.yyyy, r1.xxxx
//           bitmask.z = ((~(-1 << 31)) << 1) & 0xffffffff;  r1.z = (((uint)r3.x << 1) & bitmask.z) | ((uint)1 & ~bitmask.z);
//         // No code for instruction (needs manual fix):
//                 store_uav_typed u2.xyzw, r1.zzzz, r4.xxxx
//         }
//       }
//       r1.x = (int)r1.x + 1;
//     }
//   }
//   return;
// }
//////////////////////////////// HLSL Errors ////////////////////////////////
// D:\GOG\Bloodstained Ritual of the Night\BloodstainedRotN\Binaries\Win64\ShaderFixes\52f8c48b1bb75d13-cs_replace.txt(28,10): error X3000: syntax error: unexpected token ')'
/////////////////////////////////////////////////////////////////////////////
