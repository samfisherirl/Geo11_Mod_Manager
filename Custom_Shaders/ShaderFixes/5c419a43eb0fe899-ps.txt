//Temporal AntiAliasing (TAA) PS 2.
// ---- Created with 3Dmigoto v1.3.16 on Fri Jul 15 12:38:16 2022
//Texture2D<float4> t3 : register(t3);
//
//Texture2D<float4> t2 : register(t2);
//
//Texture2D<float4> t1 : register(t1);
//
//Texture2D<float4> t0 : register(t0);
//
//SamplerState s3_s : register(s3);
//
//SamplerState s2_s : register(s2);
//
//SamplerState s1_s : register(s1);
//
//SamplerState s0_s : register(s0);
//
//cbuffer cb1 : register(b1)
//{
//  float4 cb1[128];
//}
//
//cbuffer cb0 : register(b0)
//{
//  float4 cb0[48];
//}
//
//
//
//
//// 3Dmigoto declarations
//#define cmp -
//Texture1D<float4> IniParams : register(t120);
//Texture2D<float4> StereoParams : register(t125);
//
//
//void main(
//  linear noperspective float2 v0 : TEXCOORD0,
//  linear noperspective float2 w0 : TEXCOORD3,
//  linear noperspective float4 v1 : TEXCOORD1,
//  float4 v2 : TEXCOORD2,
//  float2 v3 : TEXCOORD4,
//  float4 v4 : SV_POSITION0,
//  out float4 o0 : SV_Target0)
//{
//  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
//  uint4 bitmask, uiDest;
//  float4 fDest;
//
//  r0.xy = v0.xy * cb1[127].xy + -cb1[125].xy;
//  r0.xy = cb1[126].zw * r0.xy;
//  r1.xy = r0.xy + r0.xy;
//  r0.z = r0.x * 2 + -1;
//  r0.w = -r0.y * 2 + 1;
//  r0.xy = r0.xy * cb0[42].xy + cb0[42].zw;
//  r2.x = t0.SampleLevel(s0_s, r0.xy, 0, int2(0, 0)).x;
//  r2.w = t0.SampleLevel(s0_s, r0.xy, 0, int2(-2, -2)).x;
//  r3.x = t0.SampleLevel(s0_s, r0.xy, 0, int2(2, -2)).x;
//  r3.y = t0.SampleLevel(s0_s, r0.xy, 0, int2(-2, 2)).x;
//  r3.z = t0.SampleLevel(s0_s, r0.xy, 0, int2(2, 2)).x;
//  r3.w = cmp(r3.x < r2.w);
//  r4.y = r3.w ? -2 : 2;
//  r3.w = cmp(r3.z < r3.y);
//  r5.y = r3.w ? -2 : 2;
//  r2.w = max(r3.x, r2.w);
//  r3.x = max(r3.y, r3.z);
//  r3.y = cmp(r3.x < r2.w);
//  r4.z = -2;
//  r5.z = 2;
//  r3.yz = r3.yy ? r4.yz : r5.yz;
//  r4.x = max(r3.x, r2.w);
//  r2.w = cmp(r2.x < r4.x);
//  r4.yz = cb0[0].zw * r3.yz;
//  r2.yz = float2(0,0);
//  r2.xyz = r2.www ? r4.xyz : r2.xyz;
//  r3.xyz = cb1[119].xyw * r0.www;
//  r3.xyz = r0.zzz * cb1[118].xyw + r3.xyz;
//  r3.xyz = r2.xxx * cb1[120].xyw + r3.xyz;
//  r3.xyz = cb1[121].xyw + r3.xyz;
//  r0.zw = r3.yx / r3.zz;
//  r1.zw = r1.xy * float2(1,-1) + float2(-1,1);
//  r0.zw = r1.wz + -r0.zw;
//  r1.yz = r2.yz + r0.xy;
//  r1.yz = t2.SampleLevel(s2_s, r1.yz, 0).xy;
//  r2.x = cmp(0 < r1.y);
//  r1.yz = r1.zy * float2(4.00801611,4.00801611) + float2(-2.00397754,-2.00397754);
//  r0.zw = r2.xx ? r1.yz : r0.zw;
//  r1.xy = float2(-1,0) + r1.xw;
//  r0.zw = r1.yx + -r0.zw;
//  r1.z = max(abs(r0.w), abs(r0.z));
//  r2.xyz = t1.SampleLevel(s1_s, r0.xy, 0, int2(0, -1)).xyz;
//  r3.x = dot(r2.xzy, float3(1,1,2));
//  r3.y = dot(r2.xz, float2(2,-2));
//  r3.z = dot(r2.xzy, float3(-1,-1,2));
//  r2.xyz = t1.SampleLevel(s1_s, r0.xy, 0, int2(-1, 0)).xyz;
//  r4.x = dot(r2.xzy, float3(1,1,2));
//  r4.y = dot(r2.xz, float2(2,-2));
//  r4.z = dot(r2.xzy, float3(-1,-1,2));
//  r2.xyz = t1.SampleLevel(s1_s, r0.xy, 0, int2(0, 0)).xyz;
//  r5.x = dot(r2.xzy, float3(1,1,2));
//  r5.y = dot(r2.xz, float2(2,-2));
//  r5.z = dot(r2.xzy, float3(-1,-1,2));
//  r2.xyz = t1.SampleLevel(s1_s, r0.xy, 0, int2(1, 0)).xyz;
//  r6.x = dot(r2.xzy, float3(1,1,2));
//  r6.y = dot(r2.xz, float2(2,-2));
//  r6.z = dot(r2.xzy, float3(-1,-1,2));
//  r2.xyz = t1.SampleLevel(s1_s, r0.xy, 0, int2(0, 1)).xyz;
//  r7.x = dot(r2.xzy, float3(1,1,2));
//  r7.y = dot(r2.xz, float2(2,-2));
//  r7.z = dot(r2.xzy, float3(-1,-1,2));
//  r1.xy = cb0[22].zw * float2(2,2) + abs(r1.xy);
//  r1.x = max(r1.x, r1.y);
//  r1.xz = cmp(r1.xz >= float2(1,1));
//  if (r1.x != 0) {
//    r1.xyw = r5.xyz;
//  } else {
//    r2.x = r3.x * v1.x + 4;
//    r2.x = rcp(r2.x);
//    r2.y = cb0[37].x * r2.x;
//    r2.z = r4.x * v1.x + 4;
//    r2.z = rcp(r2.z);
//    r2.z = cb0[38].x * r2.z;
//    r8.xyz = r2.zzz * r4.xyz;
//    r8.xyz = r2.yyy * r3.xyz + r8.xyz;
//    r2.x = cb0[37].x * r2.x + r2.z;
//    r2.y = r5.x * v1.x + 4;
//    r2.y = rcp(r2.y);
//    r2.z = cb0[39].x * r2.y;
//    r8.xyz = r2.zzz * r5.xyz + r8.xyz;
//    r2.x = cb0[39].x * r2.y + r2.x;
//    r2.y = r6.x * v1.x + 4;
//    r2.y = rcp(r2.y);
//    r2.z = cb0[40].x * r2.y;
//    r8.xyz = r2.zzz * r6.xyz + r8.xyz;
//    r2.x = cb0[40].x * r2.y + r2.x;
//    r2.y = r7.x * v1.x + 4;
//    r2.y = rcp(r2.y);
//    r2.z = cb0[41].x * r2.y;
//    r8.xyz = r2.zzz * r7.xyz + r8.xyz;
//    r2.x = cb0[41].x * r2.y + r2.x;
//    r2.x = rcp(r2.x);
//    r1.xyw = r8.xyz * r2.xxx;
//  }
//  r2.xyz = min(r5.xyz, r4.xyz);
//  r2.xyz = min(r3.xyz, r2.xyz);
//  r8.xyz = min(r7.xyz, r6.xyz);
//  r2.xyz = min(r8.xyz, r2.xyz);
//  r4.xyz = max(r5.xyz, r4.xyz);
//  r3.xyz = max(r4.xyz, r3.xyz);
//  r4.xyz = max(r7.xyz, r6.xyz);
//  r3.xyz = max(r4.xyz, r3.xyz);
//  r0.zw = r0.zw * cb0[45].yx + cb0[45].wz;
//  r0.zw = max(cb0[47].yx, r0.zw);
//  r0.zw = min(cb0[47].wz, r0.zw);
//  r4.xy = r0.wz * cb0[46].xy + float2(-0.5,-0.5);
//  r4.xy = floor(r4.xy);
//  r5.xyzw = float4(0.5,0.5,-0.5,-0.5) + r4.xyxy;
//  r0.zw = r0.zw * cb0[46].yx + -r5.yx;
//  r4.zw = r0.wz * r0.wz;
//  r6.xy = r4.zw * r0.wz;
//  r6.zw = r4.wz * r0.zw + r0.zw;
//  r6.zw = -r6.zw * float2(0.5,0.5) + r4.wz;
//  r7.xy = float2(2.5,2.5) * r4.wz;
//  r6.xy = r6.yx * float2(1.5,1.5) + -r7.xy;
//  r6.xy = float2(1,1) + r6.xy;
//  r0.zw = r4.zw * r0.wz + -r4.zw;
//  r4.zw = float2(0.5,0.5) * r0.zw;
//  r7.xy = float2(1,1) + -r6.wz;
//  r7.xy = r7.xy + -r6.yx;
//  r0.zw = -r0.zw * float2(0.5,0.5) + r7.xy;
//  r6.xy = r6.xy + r0.wz;
//  r0.zw = r0.zw / r6.yx;
//  r0.zw = r5.xy + r0.zw;
//  r4.xy = float2(2.5,2.5) + r4.xy;
//  r5.xy = cb0[46].wz * r5.wz;
//  r7.zw = cb0[46].wz * r0.wz;
//  r0.zw = cb0[46].zw * r4.xy;
//  r4.xy = r6.yx * r6.zw;
//  r2.w = r6.y * r6.x;
//  r5.zw = r6.xy * r4.zw;
//  r3.w = r4.x + r4.y;
//  r3.w = r6.y * r6.x + r3.w;
//  r3.w = r4.z * r6.x + r3.w;
//  r3.w = r4.w * r6.y + r3.w;
//  r3.w = 1 / r3.w;
//  r7.xy = max(cb0[47].yx, r5.xy);
//  r6.xyzw = t3.SampleLevel(s3_s, r7.wx, 0).xyzw;
//  r8.xyzw = t3.SampleLevel(s3_s, r7.yz, 0).xyzw;
//  r8.xyzw = r8.xyzw * r4.yyyy;
//  r4.xyzw = r6.xyzw * r4.xxxx + r8.xyzw;
//  r6.xyzw = t3.SampleLevel(s3_s, r7.wz, 0).xyzw;
//  r4.xyzw = r6.xyzw * r2.wwww + r4.xyzw;
//  r7.xy = min(cb0[47].zw, r0.zw);
//  r6.xyzw = t3.SampleLevel(s3_s, r7.xz, 0).xyzw;
//  r4.xyzw = r6.xyzw * r5.zzzz + r4.xyzw;
//  r6.xyzw = t3.SampleLevel(s3_s, r7.wy, 0).xyzw;
//  r4.xyzw = r6.xyzw * r5.wwww + r4.xyzw;
//  r4.xyzw = r4.xyzw * r3.wwww;
//  r5.x = dot(r4.xzy, float3(1,1,2));
//  r5.y = dot(r4.xz, float2(2,-2));
//  r5.z = dot(r4.xzy, float3(-1,-1,2));
//  r0.z = t2.SampleLevel(s2_s, r0.xy, 0, int2(0, -1)).x;
//  r0.z = cmp(0 < r0.z);
//  r0.w = t2.SampleLevel(s2_s, r0.xy, 0, int2(-1, 0)).x;
//  r0.w = cmp(0 < r0.w);
//  r2.w = t2.SampleLevel(s2_s, r0.xy, 0).x;
//  r2.w = cmp(0 < r2.w);
//  r3.w = t2.SampleLevel(s2_s, r0.xy, 0, int2(1, 0)).x;
//  r3.w = cmp(0 < r3.w);
//  r0.x = t2.SampleLevel(s2_s, r0.xy, 0, int2(0, 1)).x;
//  r0.x = cmp(0 < r0.x);
//  r0.y = (int)r0.w | (int)r0.z;
//  r0.y = (int)r2.w | (int)r0.y;
//  r0.y = (int)r3.w | (int)r0.y;
//  r0.x = (int)r0.x | (int)r0.y;
//  r0.x = ~(int)r0.x;
//  r0.y = cmp(0 < r4.w);
//  r0.x = r0.y ? r0.x : 0;
//  r0.x = (int)r0.x | (int)r1.z;
//  r0.yzw = max(r5.xyz, r2.xyz);
//  r0.yzw = min(r0.yzw, r3.xyz);
//  r0.xyz = r0.xxx ? r1.xyw : r0.yzw;
//  r0.w = r1.x * v1.x + 4;
//  r0.w = rcp(r0.w);
//  r1.z = r0.x * v1.x + 4;
//  r1.z = rcp(r1.z);
//  r2.x = 0.75 * r1.z;
//  r0.w = 0.25 * r0.w;
//  r1.z = r1.z * 0.75 + r0.w;
//  r1.z = rcp(r1.z);
//  r2.x = r2.x * r1.z;
//  r0.w = r1.z * r0.w;
//  r1.xyz = r1.xyw * r0.www;
//  r0.xyz = r0.xyz * r2.xxx + r1.xyz;
//  r1.xyz = float3(0.25,0.25,0.25) * r0.xyz;
//  r3.yz = r1.xx + r1.yz;
//  r3.x = -r0.z * 0.25 + r3.y;
//  r0.x = r0.x * 0.25 + -r1.y;
//  r3.w = -r0.z * 0.25 + r0.x;
//  r0.xyz = min(float3(0,0,0), -r3.xzw);
//  o0.xyz = -r0.xyz;
//  o0.w = r2.w ? 1.000000 : 0;
//  return;
//}
//
///*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Fri Jul 15 12:38:16 2022
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy
// TEXCOORD                 3     zw        0     NONE   float
// TEXCOORD                 1   xyz         1     NONE   float   x
// TEXCOORD                 2   xyzw        2     NONE   float
// TEXCOORD                 4   xy          3     NONE   float
// SV_POSITION              0   xyzw        4      POS   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[48], immediateIndexed
dcl_constantbuffer cb1[128], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear noperspective v0.xy
dcl_input_ps linear noperspective v1.x
dcl_output o0.xyzw
dcl_temps 30
dcl_resource_texture2d (float,float,float,float) t125
ld_indexable(texture2d)(float,float,float,float) r25.xyzw, l(0, 0, 0, 0), t125.xyzw
mad r0.xy, v0.xyxx, cb1[127].xyxx, -cb1[125].xyxx
mul r0.xy, r0.xyxx, cb1[126].zwzz
add r1.xy, r0.xyxx, r0.xyxx
mad r0.z, r0.x, l(2.000000), l(-1.000000)
mad r0.w, -r0.y, l(2.000000), l(1.000000)
mad r0.xy, r0.xyxx, cb0[42].xyxx, cb0[42].zwzz
sample_l_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r2.x, r0.xyxx, t0.xyzw, s0, l(0.000000)
sample_l_aoffimmi_indexable(-2,-2,0)(texture2d)(float,float,float,float) r2.w, r0.xyxx, t0.yzwx, s0, l(0.000000)
sample_l_aoffimmi_indexable(2,-2,0)(texture2d)(float,float,float,float) r3.x, r0.xyxx, t0.xyzw, s0, l(0.000000)
sample_l_aoffimmi_indexable(-2,2,0)(texture2d)(float,float,float,float) r3.y, r0.xyxx, t0.yxzw, s0, l(0.000000)
sample_l_aoffimmi_indexable(2,2,0)(texture2d)(float,float,float,float) r3.z, r0.xyxx, t0.yzxw, s0, l(0.000000)
lt r3.w, r3.x, r2.w
movc r4.y, r3.w, l(-2.000000), l(2.000000)
lt r3.w, r3.z, r3.y
movc r5.y, r3.w, l(-2.000000), l(2.000000)
max r2.w, r2.w, r3.x
max r3.x, r3.z, r3.y
lt r3.y, r3.x, r2.w
mov r4.z, l(-2.000000)
mov r5.z, l(2.000000)
movc r3.yz, r3.yyyy, r4.yyzy, r5.yyzy
max r4.x, r2.w, r3.x
lt r2.w, r2.x, r4.x
mul r4.yz, r3.yyzy, cb0[0].zzwz
mov r2.yz, l(0,0,0,0)
movc r2.xyz, r2.wwww, r4.xyzx, r2.xyzx

mov r21.z, r0.z
mul r25.w, r25.y, r2.x
mul r25.w, r25.w, l(-0.1)
add r25.w, r25.w, l(1.0)
mad r21.z, -r25.x, r25.w, r21.z

mul r3.xyz, r0.wwww, cb1[119].xywx
mad r3.xyz, r21.zzzz, cb1[118].xywx, r3.xyzx
mad r3.xyz, r2.xxxx, cb1[120].xywx, r3.xyzx
add r3.xyz, r3.xyzx, cb1[121].xywx

mul r25.w, r25.y, r2.x
mul r25.w, r25.w, l(-0.1)
add r25.w, r3.z, r25.w
mad r3.x, r25.x, r25.w, r3.x

div r0.zw, r3.yyyx, r3.zzzz
mad r1.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, -1.000000), l(0.000000, 0.000000, -1.000000, 1.000000)
add r0.zw, -r0.zzzw, r1.wwwz
add r1.yz, r0.xxyx, r2.yyzy
sample_l_indexable(texture2d)(float,float,float,float) r1.yz, r1.yzyy, t2.zxyw, s2, l(0.000000)
lt r2.x, l(0.000000), r1.y
mad r1.yz, r1.zzyz, l(0.000000, 4.008016, 4.008016, 0.000000), l(0.000000, -2.00397754, -2.00397754, 0.000000)
movc r0.zw, r2.xxxx, r1.yyyz, r0.zzzw
add r1.xy, r1.xwxx, l(-1.000000, 0.000000, 0.000000, 0.000000)
add r0.zw, -r0.zzzw, r1.yyyx
max r1.z, |r0.z|, |r0.w|
sample_l_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r2.xyz, r0.xyxx, t1.xyzw, s1, l(0.000000)
dp3 r3.x, r2.xzyx, l(1.000000, 1.000000, 2.000000, 0.000000)
dp2 r3.y, r2.xzxx, l(2.000000, -2.000000, 0.000000, 0.000000)
dp3 r3.z, r2.xzyx, l(-1.000000, -1.000000, 2.000000, 0.000000)
sample_l_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r2.xyz, r0.xyxx, t1.xyzw, s1, l(0.000000)
dp3 r4.x, r2.xzyx, l(1.000000, 1.000000, 2.000000, 0.000000)
dp2 r4.y, r2.xzxx, l(2.000000, -2.000000, 0.000000, 0.000000)
dp3 r4.z, r2.xzyx, l(-1.000000, -1.000000, 2.000000, 0.000000)
sample_l_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r2.xyz, r0.xyxx, t1.xyzw, s1, l(0.000000)
dp3 r5.x, r2.xzyx, l(1.000000, 1.000000, 2.000000, 0.000000)
dp2 r5.y, r2.xzxx, l(2.000000, -2.000000, 0.000000, 0.000000)
dp3 r5.z, r2.xzyx, l(-1.000000, -1.000000, 2.000000, 0.000000)
sample_l_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r2.xyz, r0.xyxx, t1.xyzw, s1, l(0.000000)
dp3 r6.x, r2.xzyx, l(1.000000, 1.000000, 2.000000, 0.000000)
dp2 r6.y, r2.xzxx, l(2.000000, -2.000000, 0.000000, 0.000000)
dp3 r6.z, r2.xzyx, l(-1.000000, -1.000000, 2.000000, 0.000000)
sample_l_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r2.xyz, r0.xyxx, t1.xyzw, s1, l(0.000000)
dp3 r7.x, r2.xzyx, l(1.000000, 1.000000, 2.000000, 0.000000)
dp2 r7.y, r2.xzxx, l(2.000000, -2.000000, 0.000000, 0.000000)
dp3 r7.z, r2.xzyx, l(-1.000000, -1.000000, 2.000000, 0.000000)
mad r1.xy, cb0[22].zwzz, l(2.000000, 2.000000, 0.000000, 0.000000), |r1.xyxx|
max r1.x, r1.y, r1.x
ge r1.xz, r1.xxzx, l(1.000000, 0.000000, 1.000000, 0.000000)
if_nz r1.x
  mov r1.xyw, r5.xyxz
else
  mad r2.x, r3.x, v1.x, l(4.000000)
  rcp r2.x, r2.x
  mul r2.y, r2.x, cb0[37].x
  mad r2.z, r4.x, v1.x, l(4.000000)
  rcp r2.z, r2.z
  mul r2.z, r2.z, cb0[38].x
  mul r8.xyz, r4.xyzx, r2.zzzz
  mad r8.xyz, r2.yyyy, r3.xyzx, r8.xyzx
  mad r2.x, cb0[37].x, r2.x, r2.z
  mad r2.y, r5.x, v1.x, l(4.000000)
  rcp r2.y, r2.y
  mul r2.z, r2.y, cb0[39].x
  mad r8.xyz, r2.zzzz, r5.xyzx, r8.xyzx
  mad r2.x, cb0[39].x, r2.y, r2.x
  mad r2.y, r6.x, v1.x, l(4.000000)
  rcp r2.y, r2.y
  mul r2.z, r2.y, cb0[40].x
  mad r8.xyz, r2.zzzz, r6.xyzx, r8.xyzx
  mad r2.x, cb0[40].x, r2.y, r2.x
  mad r2.y, r7.x, v1.x, l(4.000000)
  rcp r2.y, r2.y
  mul r2.z, r2.y, cb0[41].x
  mad r8.xyz, r2.zzzz, r7.xyzx, r8.xyzx
  mad r2.x, cb0[41].x, r2.y, r2.x
  rcp r2.x, r2.x
  mul r1.xyw, r2.xxxx, r8.xyxz
endif
min r2.xyz, r4.xyzx, r5.xyzx
min r2.xyz, r2.xyzx, r3.xyzx
min r8.xyz, r6.xyzx, r7.xyzx
min r2.xyz, r2.xyzx, r8.xyzx
max r4.xyz, r4.xyzx, r5.xyzx
max r3.xyz, r3.xyzx, r4.xyzx
max r4.xyz, r6.xyzx, r7.xyzx
max r3.xyz, r3.xyzx, r4.xyzx
mad r0.zw, r0.zzzw, cb0[45].yyyx, cb0[45].wwwz
max r0.zw, r0.zzzw, cb0[47].yyyx
min r0.zw, r0.zzzw, cb0[47].wwwz
mad r4.xy, r0.wzww, cb0[46].xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
round_ni r4.xy, r4.xyxx
add r5.xyzw, r4.xyxy, l(0.500000, 0.500000, -0.500000, -0.500000)
mad r0.zw, r0.zzzw, cb0[46].yyyx, -r5.yyyx
mul r4.zw, r0.wwwz, r0.wwwz
mul r6.xy, r0.wzww, r4.zwzz
mad r6.zw, r4.wwwz, r0.zzzw, r0.zzzw
mad r6.zw, -r6.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), r4.wwwz
mul r7.xy, r4.wzww, l(2.500000, 2.500000, 0.000000, 0.000000)
mad r6.xy, r6.yxyy, l(1.500000, 1.500000, 0.000000, 0.000000), -r7.xyxx
add r6.xy, r6.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
mad r0.zw, r4.zzzw, r0.wwwz, -r4.zzzw
mul r4.zw, r0.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
add r7.xy, -r6.wzww, l(1.000000, 1.000000, 0.000000, 0.000000)
add r7.xy, -r6.yxyy, r7.xyxx
mad r0.zw, -r0.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), r7.xxxy
add r6.xy, r0.wzww, r6.xyxx
div r0.zw, r0.zzzw, r6.yyyx
add r0.zw, r0.zzzw, r5.xxxy
add r4.xy, r4.xyxx, l(2.500000, 2.500000, 0.000000, 0.000000)
mul r5.xy, r5.wzww, cb0[46].wzww
mul r7.zw, r0.wwwz, cb0[46].wwwz
mul r0.zw, r4.xxxy, cb0[46].zzzw
mul r4.xy, r6.zwzz, r6.yxyy
mul r2.w, r6.x, r6.y
mul r5.zw, r4.zzzw, r6.xxxy
add r3.w, r4.y, r4.x
mad r3.w, r6.y, r6.x, r3.w
mad r3.w, r4.z, r6.x, r3.w
mad r3.w, r4.w, r6.y, r3.w
div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
max r7.xy, r5.xyxx, cb0[47].yxyy
sample_l_indexable(texture2d)(float,float,float,float) r6.xyzw, r7.wxww, t3.xyzw, s3, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r8.xyzw, r7.yzyy, t3.xyzw, s3, l(0.000000)
mul r8.xyzw, r4.yyyy, r8.xyzw
mad r4.xyzw, r6.xyzw, r4.xxxx, r8.xyzw
sample_l_indexable(texture2d)(float,float,float,float) r6.xyzw, r7.wzww, t3.xyzw, s3, l(0.000000)
mad r4.xyzw, r6.xyzw, r2.wwww, r4.xyzw
min r7.xy, r0.zwzz, cb0[47].zwzz
sample_l_indexable(texture2d)(float,float,float,float) r6.xyzw, r7.xzxx, t3.xyzw, s3, l(0.000000)
mad r4.xyzw, r6.xyzw, r5.zzzz, r4.xyzw
sample_l_indexable(texture2d)(float,float,float,float) r6.xyzw, r7.wyww, t3.xyzw, s3, l(0.000000)
mad r4.xyzw, r6.xyzw, r5.wwww, r4.xyzw
mul r4.xyzw, r3.wwww, r4.xyzw
dp3 r5.x, r4.xzyx, l(1.000000, 1.000000, 2.000000, 0.000000)
dp2 r5.y, r4.xzxx, l(2.000000, -2.000000, 0.000000, 0.000000)
dp3 r5.z, r4.xzyx, l(-1.000000, -1.000000, 2.000000, 0.000000)
sample_l_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r0.z, r0.xyxx, t2.yzxw, s2, l(0.000000)
lt r0.z, l(0.000000), r0.z
sample_l_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r0.w, r0.xyxx, t2.yzwx, s2, l(0.000000)
lt r0.w, l(0.000000), r0.w
sample_l_indexable(texture2d)(float,float,float,float) r2.w, r0.xyxx, t2.yzwx, s2, l(0.000000)
lt r2.w, l(0.000000), r2.w
sample_l_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r3.w, r0.xyxx, t2.yzwx, s2, l(0.000000)
lt r3.w, l(0.000000), r3.w
sample_l_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r0.x, r0.xyxx, t2.xyzw, s2, l(0.000000)
lt r0.x, l(0.000000), r0.x
or r0.y, r0.w, r0.z
or r0.y, r2.w, r0.y
or r0.y, r3.w, r0.y
or r0.x, r0.x, r0.y
not r0.x, r0.x
lt r0.y, l(0.000000), r4.w
and r0.x, r0.y, r0.x
or r0.x, r0.x, r1.z
max r0.yzw, r2.xxyz, r5.xxyz
min r0.yzw, r3.xxyz, r0.yyzw
movc r0.xyz, r0.xxxx, r1.xywx, r0.yzwy
mad r0.w, r1.x, v1.x, l(4.000000)
rcp r0.w, r0.w
mad r1.z, r0.x, v1.x, l(4.000000)
rcp r1.z, r1.z
mul r2.x, r1.z, l(0.750000)
mul r0.w, r0.w, l(0.250000)
mad r1.z, r1.z, l(0.750000), r0.w
rcp r1.z, r1.z
mul r2.x, r1.z, r2.x
mul r0.w, r0.w, r1.z
mul r1.xyz, r0.wwww, r1.xywx
mad r0.xyz, r0.xyzx, r2.xxxx, r1.xyzx
mul r1.xyz, r0.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)
add r3.yz, r1.yyzy, r1.xxxx
mad r3.x, -r0.z, l(0.250000), r3.y
mad r0.x, r0.x, l(0.250000), -r1.y
mad r3.w, -r0.z, l(0.250000), r0.x
min r0.xyz, -r3.xzwx, l(0.000000, 0.000000, 0.000000, 0.000000)
mov o0.xyz, -r0.xyzx
and o0.w, r2.w, l(0x3f800000)
ret
// Approximately 0 instruction slots used
