/*
	This example is designed to show how to use the default Neutron template
	page. Because it uses the default template, it is also the simplest example
	to use and tweak as a beginner.
	
	It is also designed to show how you would apply your own theming to the
	template without having to modify it directly, by applying CSS styling to
	the built-in template title bar elements.
*/ 
; Generated by Auto-GUI 3.0.1
#NoEnv
SetWorkingDir, %A_ScriptDir%
SetBatchLines -1

; Include the Neutron library 
#Include %A_ScriptDir%\lib\Neutron.ahk
#Include %A_ScriptDir%\lib\tf.ahk

Global LogGames := A_AppDataCommon "\GameslistGeo11\Gamename.txt"
Global Geo11 := A_AppDataCommon "\GameslistGeo11\geo11.txt"
Global NextInstall := A_AppDataCommon "\GameslistGeo11\NextInstall.txt" 

html =
( ; html
<h2>Configure <span id="ahk_gameexe">%Gameexe%</span></h2>

<form onsubmit="ahk.Submitted(event)">
<table class="myFormat" width="450" style="text-align: left">
<tbody>
<tr>
<td width="200">Select Direct Mode<br></td>
<td width="">
<select id="directmode" for="directmode" data-toggle="tooltip" data-placement="top" title="katanga_vr - vr output to HelixVision.

nvidia_dx9 - works on latest drivers. Requires 3D Vision Driver. Requires game in exclusive fullscreen.

nvidia_dx11 - works up to driver 452.06. Requires 3D Vision Driver. Requires game in windowed mode."> 

<option value="9">-------- Update here --------</option>
<option value="katanga_vr">Kantanga VR</option>
<option value="nvidia_dx9">DirectX-9</option>
<option value="nvidia_dx11">DirectX-11</option>
<option value="sbs">Side-by-side</option>
<option value="tab">Top-and-Bottom</option>
</select>
</td>

<tr>

<td>Upscale Mode<br>
</td>
<td><select id="upscalemode" for="upscalemode" data-toggle="tooltip" data-placement="top" title=" (Disable) - disable upscaling
    ; (Fullscreen and windowed) - enable upscaling and allows the game to disable and enable fullscreen mode
; (Windowed Lock) - enable upscaling and don't allow the game to switch fullscreen mode
;(Disabled). Try this if you get issues with the mouse cursor.">
<option value="9">-------- Update here --------</option>
<option value="1">Fullscreen and Windowed</option>
<option value="2">Windowed Lock</option>
<option value="0">Disable Upscaling</option>
</select><br></td>
</tr>
</tr> <td>Resolution Scale<br>
</td>
<td><select id="resolutionscale" for="resolutionscale" data-toggle="tooltip" data-placement="top" title="Requires Enabling Upscaling">
    <option value="9">-------- Update here --------</option>
<option value="4">3840x2160</option>
<option value="2">2560x1440</option>
<option value="1">1920x1080</option>
</select><br></td> 
</tbody>
<tr>

<td>
<button type="submit">Submit</button>
</form> 
</td>
<td><br></td>
</tr>
</table>

)

css =
( ; css
/* Make the title bar dark with light text */
header {
    background: #333;
    color: white;
}

.main {
    background: #444;
    color: white;
}

input {
    margin: 0.25em;
    padding: 0.5em;
    border: none;
    background: #333;
    color: white;
    border-radius: 0.25em;
}
:-ms-input-placeholder {
    color: silver;
}
button {
    background: slategray;
    border: none;
    color: white;
    font-size:21px;
    padding: 0.25em 0.5em;
    border-radius: 0.25em;
}
select {
    margin: 0.25em;
    padding: 0.5em;
    border: none;
    background: #333;
    color: white;
    border-radius: 0.25em;
}
option {
    margin: 0.25em;
    padding: 0.5em;
    border: none;
    background: #333;
    color: white;
    border-radius: 0.25em;
}
.myFormat { 
    font-size:18px;
}
.td {
    text-align: "center";
    border-style:"solid";
    border-color:"black";
    font-size:15px;
}
)

js =
( ; js
// Write some JavaScript here
)

title = Configure Geo11

; Create a Neutron Window with the given content and save a reference to it in
; the variable `neutron` to be used later.

neutron := new NeutronWindow(html, css, js, title)

; Use the Gui method to set a custom label prefix for GUI events. This code is
; equivalent to the line `Gui, name:+LabelNeutron` for a normal GUI.
neutron.Gui("+LabelNeutron")

; Show the GUI, with an initial size of 640 x 480. Unlike with a normal GUI
; this size includes the title bar area, so the "client" area will be slightly
; shorter vertically than if you were to make this GUI the normal way.

neutron.Show("w540 h480")
d3dxstuff:=ReadGame() 
global d3dx:=d3dxstuff[1]
global d3dxdm:=d3dxstuff[2]
global gameexe:=d3dxstuff[3]

packed:=Readini()
global ResX:=packed[1]
global Resy:=packed[2]
global UpscaleEnable:=packed[3]
global UpscaleMode:=packed[4]
global ShaderFixes:=packed[5]
global DirectMode:=packed[6]
; Set up a timer to demonstrate making dynamic page updates every so often. 
Settext() 
return

; The built in GuiClose, GuiEscape, and GuiDropFiles event handlers will work
; with Neutron GUIs. Using them is the current best practice for handling these
; types of events. Here, we're using the name NeutronClose because the GUI was
; given a custom label prefix up in the auto-execute section.
NeutronClose:
ExitApp
return

Clicked(neutron, event)
{
    ; event.target will contain the HTML Element that fired the event.
    ; Show a message box with its inner text.
    MsgBox, % "You clicked: " event.target.innerText
}

Submitted(neutron, event)
{ 

    event.preventDefault()
    formData := neutron.GetFormData(event.target)
    ;Address     return [D3dx,D3dxdm,Directmode1,ResX,ResY,UpscaleMode,ShaderFixes,UpscaleEnable]
    ; Some events have a default action that needs to be prevented. A form will
    ; redirect the page by default, but we want to handle the form data ourself.
    ; Dismiss the GUI 
    first1:="" 
    defaultval:="9" 
    ; Use the GetFormData helper to get an associative array of the form data

    for id, value in formData
    {
        if (value!=defaultval)
        {
            if (id="directmode")
            { 
                TF_ReplaceLine("!" . D3dxdm,Directmode,Directmode,"direct_mode = " . value)
            }

            if (id="upscaleenable")
            { 
                if (value="1")
                {
                    TF_ReplaceLine("!" . D3dx,UpscaleEnable,UpscaleEnable,"include = ShaderFixes\upscale.ini")
                }
                if (value="0")
                    TF_ReplaceLine("!" . D3dx,UpscaleEnable,UpscaleEnable,";include = ShaderFixes\upscale.ini")
            } 

            if (id="resolutionscale")
            { 

                if (value="4")
                { 
                    ResolutionX:="width = 3840"
                    ResolutionY:="height = 2160"
                    TF_ReplaceLine("!" . D3dx,ResX,ResX,ResolutionX)
                    TF_ReplaceLine("!" . D3dx,ResY,ResY,ResolutionY)
                }

                if (value="2")
                { 

                    ResolutionX:="width = 2560"
                    ResolutionY:="height = 1440"
                    TF_ReplaceLine("!" . D3dx,ResX,ResX,ResolutionX)
                    TF_ReplaceLine("!" . D3dx,ResY,ResY,ResolutionY)
                }

                if (value="1")
                { 

                    ResolutionX:="width = 1920"
                    ResolutionY:="height = 1080"
                    TF_ReplaceLine("!" . D3dx,ResX,ResX,ResolutionX)
                    TF_ReplaceLine("!" . D3dx,ResY,ResY,ResolutionY)
                }
            }

            if (id="upscalemode")
            { 
                TF_ReplaceLine("!" . D3dx,UpscaleMode,UpscaleMode,"upscaling = " . value) 
                if (value="0")
                {
                    TF_ReplaceLine("!" . D3dx,UpscaleEnable,UpscaleEnable,";include = ShaderFixes\upscale.ini")
                }
                if (value="1" or value="2")
                {
                    TF_ReplaceLine("!" . D3dx,UpscaleEnable,UpscaleEnable,"include = ShaderFixes\upscale.ini")
                }
            } 

        }
    }
      MsgBox, "Success. To adjust settings further open: "%D3dx%

    neutron.hide()
    ; Re-show the GUI
    neutron.Show()
}

ReadGame()
{

    Global LogGames := A_AppDataCommon "\GameslistGeo11\Gamename.txt" 
    Global GamesUpdate := A_AppDataCommon "\GameslistGeo11\GamesUpdate.csv" 
    Global HelixLauncherBat := "\GameslistGeo11\vrapplauncher.bat"
    Global HTMLFile := A_AppDataCommon "\GameslistGeo11\HTMLfile.txt" 
    HTMLFile1 := A_AppDataCommon "\GameslistGeo11\HTMLfile1.txt" 
    Global HelixLocal := A_AppDataCommon "\GameslistGeo11\HelixLocal.txt" 
    F:="!"Loggames
    delimiter:="," 
    Logger:=[]
    Loop, read, %NextInstall% 
    { 
        if (A_LoopReadLine!="")
        {
            Logger := StrSplit(A_LoopReadLine, delimiter) 
            stringer:=Logger[1]
            gameexe:=Logger[2] 
        }
    } 
    SplitPath, stringer,, Pather
    FileDelete, %Geo11%
    FileAppend, 
    (
    %Pather%\geo\d3dx.ini
    %Pather%\geo\d3dxdm.ini
    ), %Geo11% 
    global d3dx := Pather "\geo\d3dx.ini"
    global d3dxdm := Pather "\geo\d3dxdm.ini"
    msgbox, %d3dx% %d3dxdm%
return [d3dx,d3dxdm,gameexe]
}

Readini()
{ 
    msgbox, %d3dx%
    Loop, Read, %d3dx%
    { 
        Loop, parse, A_LoopReadLine, `n
        {
            if InStr(A_LoopReadLine,"include = ShaderFixes\upscale.ini") 
            {
                UpscaleEn:=1
            }

            if InStr(A_LoopReadLine,"include = ShaderFixes\3dvision2sbs.ini") 
            {
                ShaderFi:=1 
            }

            if InStr(A_LoopReadLine,"width/height below") 
            {
                UpscaleM := 1 
            }

            if InStr(A_LoopReadLine,"resolution of your tv or monitor") 
            {
                Res := 1
            } 
        }
        if (Res="1")
        {
            ResX:=A_Index+1
            ResY:=A_Index+2
            Res:=0
        }
        if (UpscaleEn="1")
        {
            UpscaleEnable:=A_Index
            UpscaleEn:=0
        }
        if (UpscaleM="1")
        {
            UpscaleMode:=A_Index+1
            UpscaleM:=0
        }
        if (DirectM="1")
        {
            DirectMode:=A_Index
            DirectM:=0
        }
        if (ShaderFi="1")
        {
            ShaderFixes:=A_Index
            ShaderFi:=0
        }

    }
    Loop, Read, %d3dxdm%
    {
        Loop, parse, A_LoopReadLine, `n
        {
            if InStr(A_LoopReadLine,"direct_mode = ") 
            {
                DirectM := 1 
            }
        }
        if (DirectM="1")
        {
            DirectMode:=A_Index
            DirectM:=0
        }
    }

return [ResX,Resy,UpscaleEnable,UpscaleMode,ShaderFixes,DirectMode]
}

Settext()
{ 
    global
    neutron.doc.getElementById("ahk_gameexe").innerText := gameexe

}

DynamicContent()
{
    ; This function isn't called by Neutron, so we'll have to grab the global
    ; Neutron window variable instead of using one from a Neutron event.
    global neutron

    ; Get the mouse position
    MouseGetPos, x, y

    ; Update the page with the new position
    neutron.doc.getElementById("ahk_x").innerText := x
    neutron.doc.getElementById("ahk_y").innerText := y
}
